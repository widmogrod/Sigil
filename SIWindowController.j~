@import <AppKit/CPWindowController.j>
@import <AppKit/CPView.j>

@import "Views/SIElementsView.j"

@implementation SIWindowController: CPWindowController
{}

- (void) init
{
	// Utwórz okno bez obramowań
	var theWindow = [[CPWindow alloc] initWithContentRect:CGRectMakeZero()
												styleMask:CPBorderlessWindowMask],
		contentView = [theWindow contentView];

	// Pobierz wymiary okna przeglądarki
	var platformBounds = [[theWindow platformWindow] nativeContentRect];

	// Pozycjonowaniue CPWindow w odpowiednim miejscu
	[theWindow setFrameOrigin:CGPointMake(SISitebarLeftWidth, SIToolbarAndMenubarHeight)];
	[theWindow setFrameSize:CGSizeMake(CGRectGetWidth(platformBounds) - SISitebarLeftWidth, 
									   CGRectGetHeight(platformBounds) - SIToolbarAndMenubarHeight)];


	// Okno bedzie się rozszerzać w wysokości i szerokości
	[theWindow setAutoresizingMask:CPViewWidthSizable | CPViewHeightSizable];	

	// Pobierz aktualne bounds (ważne że po pozycjonowaniu okna głównego)
	var bounds = [contentView bounds];

	// Dodaj widok, w którym będą renderowane elementy
	var contentArea = [[SIElementsView alloc] initWithFrame:CGRectMake(10, 10,
																CGRectGetWidth(bounds)-20,
																CGRectGetHeight(bounds)-20)];
	// zachowuj sie elastycznie
    [contentArea setAutoresizingMask:CPViewWidthSizable | CPViewHeightSizable];


	// elementy potrzebne tylko by wyróżnić...
	[contentView setBackgroundColor:[CPColor greenColor]];
    [contentArea setBackgroundColor:[CPColor redColor]];
    
	// dodaj element do widoku
	[contentView addSubview:contentArea];
	
	
	//[theWindow makeFirstResponder:contentArea];

	self = [super initWithWindow:theWindow];
	if (self)
	{
		
	}
	
	return self;
}

/*
	Zestaw elementów wchodzących w skład SIDocument
*/
- (CPSet)elements
{
	var elements = [[self document] elements];
	if (!elements)
	{
		elements = [CPSet set];
	}

	return elements;
}


@end
